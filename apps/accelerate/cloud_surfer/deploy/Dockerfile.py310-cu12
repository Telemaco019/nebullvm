FROM nvidia/cuda:12.1.0-base-ubuntu22.04


# Args
ARG COMPILER=all
ARG NEBULLVM_VERSION=0.9.1
ARG DEBIAN_FRONTEND=noninteractive
ARG PYTHON_VERSION=3.10.8

ENV PYTHON_VERSION=${PYTHON_VERSION}

# Install set of all dependencies needed for pyenv to work on Ubuntu
RUN apt-get update && apt-get install -y --no-install-recommends \
  make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
  libsqlite3-dev wget ca-certificates curl llvm libncurses5-dev xz-utils \
  tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev mecab-ipadic-utf8 git

# Set-up necessary Env vars for PyEnv
ENV PYENV_ROOT /root/.pyenv
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH

# Install pyenv
RUN set -ex && curl https://pyenv.run | bash \
    && pyenv update \
    && pyenv install $PYTHON_VERSION \
    && pyenv global $PYTHON_VERSION \
    && pyenv rehash

# Install Ray nightly release
RUN pip3 install --no-cache-dir -U https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-3.0.0.dev0-cp310-cp310-manylinux2014_x86_64.whl

# Install dl frameworks
RUN pip3 install --no-cache-dir torch torchvision --extra-index-url https://download.pytorch.org/whl/cu118
RUN pip3 install --no-cache-dir tensorflow
RUN pip3 install --no-cache-dir onnx
RUN pip3 install --no-cache-dir transformers

# Install required python modules
RUN pip3 install --no-cache-dir cmake

# Install Nebullvm
RUN pip3 install --no-cache-dir nebullvm==${NEBULLVM_VERSION}

# Install default deep learning compilers
RUN if [ "$COMPILER" = "all" ] ; then \
        python3 -m nebullvm.installers.auto_installer --frameworks all --extra-backends all --compilers all ; \
    elif [ "$COMPILER" = "tensorrt" ] ; then \
        python3 -m nebullvm.installers.auto_installer --frameworks all --extra-backends all --compilers tensorrt ; \
    elif [ "$COMPILER" = "openvino" ] ; then \
        python3 -m nebullvm.installers.auto_installer --frameworks all --extra-backends all --compilers openvino ; \
    elif [ "$COMPILER" = "onnxruntime" ] ; then \
        python3 -m nebullvm.installers.auto_installer --frameworks all --extra-backends all --compilers onnxruntime ; \
    fi

ENV SIGOPT_PROJECT="tmp"
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/python3.8/dist-packages/tensorrt

